2019年2月28日13:55:10


CGLIB 动态代理


JDK 动态代理必须提供接口才能使用
在一些不能提供接口的环境中，就只能采用第三方技术，比如 CGLIB 动态代理

public class CglibProxyExample implements MethodInterceptor{
    
    /**
    * 生成 CGLIB 代理对象
    * @param cls Class类
    * @return Class类的 CGLIB代理对象
    */
    public Object getProxy(Class cls){
        
        //CGLIB enhancer 增强类对象
        Enhancer enhancer = new Enhancer();

        //设置增强类型
        enhancer.setSuperclass(cls);

        //定义代理逻辑对象为当前对象，要求当前对象实现 MethodInterceptor 方法
        enhancer.setCallback(this);

        //生成并返回代理对象
        return enhancer.create();
    }


    /**
    * 代理逻辑方法
    * @param proxy 代理对象
    * @param method 方法
    * @param arge 方法参数
    * @param methodProxy 方法代理
    * @return 代理逻辑返回
    * @throws Throwable 异常
    */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable{
        System.err.println("调用真实对象前");
        
        //CGLIB 反射调用真实对象方法
        Object result = methodProxy.invokeSuper(proxy, args);
        
        System.err.println("调用真实对象后")

        return result;
    }
}



/* 测试 CGLIB 动态代理 */
public void testCGLIBProxy(){
    CglibProxyExample cpe = new CglibProxyExample();
    ReflectServiceImpl obj = (ReflectServiceImpl)cpe.getProxy(ReflectServiceImpl.class);
    obj.sayHello("ZhangSan");
}