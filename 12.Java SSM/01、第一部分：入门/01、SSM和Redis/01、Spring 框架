2019年1月15日20:53:55


Spring 框架是 JavaEE 应用最广泛的框架。
它的理念包括 IOC（Inversion of Control：控制反转）和 AOP（Aspect Oriented Programming：面向切面编程）


Spring IOC 简介
IOC 是一个容器，在 Spring 中， 它会认为一切 Java 资源都是 Java Bean， 容器的目标就是管理这些 Bean 和它们之间的关系。
所以，在 Spring IOC 中装载的各种 Bean，也可以理解为 Java 的各种资源，包括 Java Bean 的创建、事件、行为等，它们由 IOC
容器管理。除此之外，各个 Java Bean 之间会存在一定的依赖关系。这些 Spring IOC 容器都能够对其进行管理。
只是 Spring IOC 管理对象和其依赖关系，采用的不是人为创建的，而是由 Spring IOC 自己通过描述创建的，也就是说 Spring 
是依靠描述来完成对象的创建及其依赖关系的。
Spring IOC 是通过描述信息（配置文件）获取所需要的资源（Bean），其中，控制权在 Spring IOC 容器中，它会根据描述找到使用
者需要的资源。这也就是控制反转的含义。
这样的好处就是接口不再依赖某个实现类，需要使用某个实现类时我们通过配置信息就可以了，想修改或者加入其它资源都可以通过配置
完成，不需要使用 new 关键字进行创建对象，依赖关系也可以通过配置完成，从而完全可以实现即插即拔的管理它们之间的关系。
而且，不需要找资源，只要想 Spring IOC 容器描述所需要资源， Spring IOC 就会自动查找需要的资源。这样就把 Bean 之间的依赖
关系解耦了，更容易写出结构清晰的程序。
另外，Spring IOC 还提供对 Java Bean 生命周期的管理，可以延迟加载，可以在其声明周期内定义一些行为，更加方便有效的管理资源。


Spring AOP
IOC 的目标为了管理 Bean ， 而 Bean 是 Java 面向对象（OOP）的基础设计。
但是，有些情况是面向对象无法处理的。
在现实中，有些条件可能会同时影响多个 OOP 对象，影响它们之间的协作。这个条件称之为切面条件。
所以，只是用 OOP 并不完善， 还需要使用面向切面的编程，通过面向切面去管理切面上某些对象之间的协作。
Spring AOP 通常用于数据库事务编程，执行完每一次操作后，并不知道下一步是否会成功，如果失败，则全部回滚，之前的操作作废。
在 Spring AOP 实现的数据事务管理中，以异常作为信息的。
在默认情况下，只要 Spring 接收到异常，就会将数据库的事务回滚，保证数据一致性。（回滚条件可以通过 Spring 配置修改）