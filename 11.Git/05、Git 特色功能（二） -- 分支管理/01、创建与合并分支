2019年5月5日12:42:24

分支管理介绍

    分支管理其实就相当于两个平行空间。
        在实际开发中，如果某一项功能没有写完，但又因为一些其他原因必须要 commit。
        如果直接 commit，不完整的代码就会导致其他人无法调试。

        此时，就可以创建一个属于自己的分支，自己在自己的分支上继续工作，不影响其他人的工作，该功能开发完毕后，在一次性合并到原来的分支上。

创建和合并分支

    Git 的大多数操作都是基于指针。所以，Git 对于分支的创建和合并速度非常快。因为它无需对工作区进行任何操作，只需要修改指针即可。

        创建分支：
            git branch p1
        切换分支：
            git checkout p1

        创建并切换分支（相当于上面两个命令）：
            git checkout -b p1

        查看当前分支：（会列出所有分支，当前分支前面会标记 * ）
            git branch

     我们可以切换到 p1 分支上进行 commit，然后切回主分支会发现刚才的 commit 并没有对主分支 master 起到影响

        合并分支：（在 master 分支下）
            git merge p1
            # 这里合并有很多种模式。默认优先的合并模式是 Fast-forward，即快速合并，就是直接将 master 分支的指针指向 p1 当前提交的指针。速度最快。
            # 但是 fast-forward 模式下，删除分支后会丢掉分支信息（git log）
            # 所以，我们一般会通过 --no-ff 方式禁用这种合并模式
            # git merge --no-ff -m "merge with no fast forward" p1
            # 这样，本次合并就会创建一个新的 commit，合并之后，也可以使用 git log 查看到分支历史

        删除分支：
            git branch -d p1